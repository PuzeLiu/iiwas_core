#include "iiwas_kinematics.h"
#include "math.h"
#include <iostream>

namespace iiwas_kinematics {

    Kinematics::Kinematics(const Vector3d &tcp_position, const Quaterniond &tcp_quaternion) : Kinematics() {
        eePos_ = tcp_position;
        eeQuat_ = tcp_quaternion;
        transformEE_.block<3, 1>(0, 3) = eePos_;
        transformEE_.block<3, 3>(0, 0) = eeQuat_.toRotationMatrix();
    }

    Kinematics::Kinematics() {
        dBs_ = 0.36;     // Distance from base to shoulder
        dSe_ = 0.42;     // Distance from shoulder to elbow
        dEw_ = 0.4;      // Distance from elbow to wrist
        dWf_ = 0.151;    // Distance from elbow to finger(tip)

        dhA_ << 0., 0., 0., 0., 0., 0., 0.;
        dhAlpha_ << -M_PI_2, M_PI_2, M_PI_2, -M_PI_2, -M_PI_2, M_PI_2, 0.;
        dhD_ << dBs_, 0., dSe_, 0., dEw_, 0., dWf_;

        posLimitsLower_ << -170., -120., -170., -120., -170., -120., -175.;
        posLimitsUpper_ << 170., 120., 170., 120., 170., 120., 175.;
        velLimitsLower_ << -85., -85., -100., -75., -130., -135., -135.;
        velLimitsUpper_ << 85., 85., 100., 75., 130., 135., 135.;
        posLimitsLower_ = posLimitsLower_ / 180. * M_PI;
        posLimitsUpper_ = posLimitsUpper_ / 180. * M_PI;
        velLimitsLower_ = velLimitsLower_ / 180. * M_PI;
        velLimitsUpper_ = velLimitsUpper_ / 180. * M_PI;

        transformEE_.setIdentity();
    }

    void Kinematics::transform_i(double q, int i, Kinematics::TransformMatrixType& T_i) {
        T_i << cos(q), -sin(q) * cos(dhAlpha_[i]), sin(q) * sin(dhAlpha_[i]), dhA_[i] * cos(q),
                sin(q), cos(q) * cos(dhAlpha_[i]), -cos(q) * sin(dhAlpha_[i]), dhA_[i] * sin(q),
                0., sin(dhAlpha_[i]), cos(dhAlpha_[i]), dhD_[i],
                0., 0., 0., 1.;
    }

    void Kinematics::ForwardKinematics(const Kinematics::JointArrayType &q, Vector3d &out_ee_pos,
                                       Quaterniond &out_ee_quad) {
        transform_.setIdentity();
        for (int i = 0; i < NUM_OF_JOINTS; ++i) {
            transform_i(q[i], i, transformTmp_);
            transform_ = transform_ * transformTmp_;
        }
        transform_ = transform_ * transformEE_;
        out_ee_pos = transform_.block<3, 1>(0, 3);
        out_ee_quad = transform_.block<3, 3>(0, 0);
    }

    void Kinematics::ForwardKinematics(const Kinematics::JointArrayType &q, Vector3d &out_ee_pos) {
        transform_.setIdentity();
        for (int i = 0; i < NUM_OF_JOINTS; ++i) {
            transform_i(q[i], i, transformTmp_);
            transform_ = transform_ * transformTmp_;
        }
        transform_ = transform_ * transformEE_;
        out_ee_pos = transform_.block<3, 1>(0, 3);
    }

    void Kinematics::Jacobian(const JointArrayType &q, JacobianType &out_jacobian) {
        JacobianPosType jac_pos;
        JacobianRotType jac_rot;
        JacobianPos(q, jac_pos);
        JacobianRot(q, jac_rot);
        out_jacobian.block<3, NUM_OF_JOINTS>(0, 0) = jac_pos;
        out_jacobian.block<3, NUM_OF_JOINTS>(3, 0) = jac_rot;
    }

    void Kinematics::JacobianPos(const Kinematics::JointArrayType &q, Kinematics::JacobianPosType &out_jacobian) {
        double q_1 = q[0];
        double q_2 = q[1];
        double q_3 = q[2];
        double q_4 = q[3];
        double q_5 = q[4];
        double q_6 = q[5];
        double q_7 = q[6];

        out_jacobian(0, 0) = dEw_ * ((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * sin(q_4) - sin(q_1) * sin(q_2) * cos(q_4)) - dSe_ * sin(q_1) * sin(q_2) + dWf_ * ((((-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * cos(q_4) - sin(q_1) * sin(q_2) * sin(q_4)) * cos(q_5) + (sin(q_1) * sin(q_3) * cos(q_2) - cos(q_1) * cos(q_3)) * sin(q_5)) * sin(q_6) + (-(-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * sin(q_4) - sin(q_1) * sin(q_2) * cos(q_4)) * cos(q_6)) + eePos_.x() * (((((-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * cos(q_4) - sin(q_1) * sin(q_2) * sin(q_4)) * cos(q_5) + (sin(q_1) * sin(q_3) * cos(q_2) - cos(q_1) * cos(q_3)) * sin(q_5)) * cos(q_6) + ((-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * sin(q_4) + sin(q_1) * sin(q_2) * cos(q_4)) * sin(q_6)) * cos(q_7) + ((-(-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * sin(q_5) + (sin(q_1) * sin(q_3) * cos(q_2) - cos(q_1) * cos(q_3)) * cos(q_5)) * sin(q_7)) + eePos_.y() * ((-(((-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * cos(q_4) - sin(q_1) * sin(q_2) * sin(q_4)) * cos(q_5) + (sin(q_1) * sin(q_3) * cos(q_2) - cos(q_1) * cos(q_3)) * sin(q_5)) * cos(q_6) - ((-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * sin(q_4) + sin(q_1) * sin(q_2) * cos(q_4)) * sin(q_6)) * sin(q_7) + ((-(-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * sin(q_5) + (sin(q_1) * sin(q_3) * cos(q_2) - cos(q_1) * cos(q_3)) * cos(q_5)) * cos(q_7)) + eePos_.z() * ((((-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * cos(q_4) - sin(q_1) * sin(q_2) * sin(q_4)) * cos(q_5) + (sin(q_1) * sin(q_3) * cos(q_2) - cos(q_1) * cos(q_3)) * sin(q_5)) * sin(q_6) + (-(-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * sin(q_4) - sin(q_1) * sin(q_2) * cos(q_4)) * cos(q_6));
        out_jacobian(0, 1) = dEw_ * (sin(q_2) * sin(q_4) * cos(q_1) * cos(q_3) + cos(q_1) * cos(q_2) * cos(q_4)) + dSe_ * cos(q_1) * cos(q_2) + dWf_ * (((-sin(q_2) * cos(q_1) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_1) * cos(q_2)) * cos(q_5) + sin(q_2) * sin(q_3) * sin(q_5) * cos(q_1)) * sin(q_6) + (sin(q_2) * sin(q_4) * cos(q_1) * cos(q_3) + cos(q_1) * cos(q_2) * cos(q_4)) * cos(q_6)) + eePos_.x() * ((((-sin(q_2) * cos(q_1) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_1) * cos(q_2)) * cos(q_5) + sin(q_2) * sin(q_3) * sin(q_5) * cos(q_1)) * cos(q_6) + (-sin(q_2) * sin(q_4) * cos(q_1) * cos(q_3) - cos(q_1) * cos(q_2) * cos(q_4)) * sin(q_6)) * cos(q_7) + ((sin(q_2) * cos(q_1) * cos(q_3) * cos(q_4) - sin(q_4) * cos(q_1) * cos(q_2)) * sin(q_5) + sin(q_2) * sin(q_3) * cos(q_1) * cos(q_5)) * sin(q_7)) + eePos_.y() * ((-((-sin(q_2) * cos(q_1) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_1) * cos(q_2)) * cos(q_5) + sin(q_2) * sin(q_3) * sin(q_5) * cos(q_1)) * cos(q_6) - (-sin(q_2) * sin(q_4) * cos(q_1) * cos(q_3) - cos(q_1) * cos(q_2) * cos(q_4)) * sin(q_6)) * sin(q_7) + ((sin(q_2) * cos(q_1) * cos(q_3) * cos(q_4) - sin(q_4) * cos(q_1) * cos(q_2)) * sin(q_5) + sin(q_2) * sin(q_3) * cos(q_1) * cos(q_5)) * cos(q_7)) + eePos_.z() * (((-sin(q_2) * cos(q_1) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_1) * cos(q_2)) * cos(q_5) + sin(q_2) * sin(q_3) * sin(q_5) * cos(q_1)) * sin(q_6) + (sin(q_2) * sin(q_4) * cos(q_1) * cos(q_3) + cos(q_1) * cos(q_2) * cos(q_4)) * cos(q_6));
        out_jacobian(0, 2) = dEw_ * (sin(q_1) * cos(q_3) + sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_4) + dWf_ * (((sin(q_1) * sin(q_3) - cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * cos(q_4) * cos(q_5)) * sin(q_6) - (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_4) * cos(q_6)) + eePos_.x() * ((((sin(q_1) * sin(q_3) - cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * cos(q_4) * cos(q_5)) * cos(q_6) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_4) * sin(q_6)) * cos(q_7) + ((sin(q_1) * sin(q_3) - cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_5) - (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_5) * cos(q_4)) * sin(q_7)) + eePos_.y() * ((-((sin(q_1) * sin(q_3) - cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * cos(q_4) * cos(q_5)) * cos(q_6) - (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_4) * sin(q_6)) * sin(q_7) + ((sin(q_1) * sin(q_3) - cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_5) - (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_5) * cos(q_4)) * cos(q_7)) + eePos_.z() * (((sin(q_1) * sin(q_3) - cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * cos(q_4) * cos(q_5)) * sin(q_6) - (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_4) * cos(q_6));
        out_jacobian(0, 3) = dEw_ * ((sin(q_1) * sin(q_3) - cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) - sin(q_2) * sin(q_4) * cos(q_1)) + dWf_ * ((-(-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) + sin(q_2) * cos(q_1) * cos(q_4)) * sin(q_6) * cos(q_5) + (-(-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) - sin(q_2) * sin(q_4) * cos(q_1)) * cos(q_6)) + eePos_.x() * (((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) - sin(q_2) * cos(q_1) * cos(q_4)) * sin(q_5) * sin(q_7) + ((-(-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) + sin(q_2) * cos(q_1) * cos(q_4)) * cos(q_5) * cos(q_6) + ((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * sin(q_6)) * cos(q_7)) + eePos_.y() * (((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) - sin(q_2) * cos(q_1) * cos(q_4)) * sin(q_5) * cos(q_7) + (-(-(-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) + sin(q_2) * cos(q_1) * cos(q_4)) * cos(q_5) * cos(q_6) - ((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * sin(q_6)) * sin(q_7)) + eePos_.z() * ((-(-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) + sin(q_2) * cos(q_1) * cos(q_4)) * sin(q_6) * cos(q_5) + (-(-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) - sin(q_2) * sin(q_4) * cos(q_1)) * cos(q_6));
        out_jacobian(0, 4) = dWf_ * (-((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * sin(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * cos(q_5)) * sin(q_6) + eePos_.x() * (((-(-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) - sin(q_2) * sin(q_4) * cos(q_1)) * cos(q_5) - (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_5)) * sin(q_7) + (-((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * sin(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * cos(q_5)) * cos(q_6) * cos(q_7)) + eePos_.y() * (((-(-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) - sin(q_2) * sin(q_4) * cos(q_1)) * cos(q_5) - (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_5)) * cos(q_7) - (-((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * sin(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * cos(q_5)) * sin(q_7) * cos(q_6)) + eePos_.z() * (-((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * sin(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * cos(q_5)) * sin(q_6);
        out_jacobian(0, 5) = dWf_ * ((((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * cos(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_5)) * cos(q_6) - (-(-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) + sin(q_2) * cos(q_1) * cos(q_4)) * sin(q_6)) + eePos_.x() * (-(((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * cos(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_5)) * sin(q_6) + ((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) - sin(q_2) * cos(q_1) * cos(q_4)) * cos(q_6)) * cos(q_7) + eePos_.y() * ((((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * cos(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_5)) * sin(q_6) - ((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) - sin(q_2) * cos(q_1) * cos(q_4)) * cos(q_6)) * sin(q_7) + eePos_.z() * ((((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * cos(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_5)) * cos(q_6) - (-(-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) + sin(q_2) * cos(q_1) * cos(q_4)) * sin(q_6));
        out_jacobian(0, 6) = eePos_.x() * (-((((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * cos(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_5)) * cos(q_6) + ((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) - sin(q_2) * cos(q_1) * cos(q_4)) * sin(q_6)) * sin(q_7) + (-((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * sin(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * cos(q_5)) * cos(q_7)) + eePos_.y() * ((-(((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * cos(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_5)) * cos(q_6) - ((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) - sin(q_2) * cos(q_1) * cos(q_4)) * sin(q_6)) * cos(q_7) - (-((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * sin(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * cos(q_5)) * sin(q_7));

        out_jacobian(1, 0) = dEw_ * ((sin(q_1) * sin(q_3) - cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) + sin(q_2) * cos(q_1) * cos(q_4)) + dSe_ * sin(q_2) * cos(q_1) + dWf_ * ((((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * cos(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_5)) * sin(q_6) + (-(-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) + sin(q_2) * cos(q_1) * cos(q_4)) * cos(q_6)) + eePos_.x() * (((((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * cos(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_5)) * cos(q_6) + ((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) - sin(q_2) * cos(q_1) * cos(q_4)) * sin(q_6)) * cos(q_7) + ((-(-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) - sin(q_2) * sin(q_4) * cos(q_1)) * sin(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * cos(q_5)) * sin(q_7)) + eePos_.y() * ((-(((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * cos(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_5)) * cos(q_6) - ((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) - sin(q_2) * cos(q_1) * cos(q_4)) * sin(q_6)) * sin(q_7) + ((-(-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) - sin(q_2) * sin(q_4) * cos(q_1)) * sin(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * cos(q_5)) * cos(q_7)) + eePos_.z() * ((((-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * cos(q_4) + sin(q_2) * sin(q_4) * cos(q_1)) * cos(q_5) + (-sin(q_1) * cos(q_3) - sin(q_3) * cos(q_1) * cos(q_2)) * sin(q_5)) * sin(q_6) + (-(-sin(q_1) * sin(q_3) + cos(q_1) * cos(q_2) * cos(q_3)) * sin(q_4) + sin(q_2) * cos(q_1) * cos(q_4)) * cos(q_6));
        out_jacobian(1, 1) = dEw_ * (sin(q_1) * sin(q_2) * sin(q_4) * cos(q_3) + sin(q_1) * cos(q_2) * cos(q_4)) + dSe_ * sin(q_1) * cos(q_2) + dWf_ * (((-sin(q_1) * sin(q_2) * cos(q_3) * cos(q_4) + sin(q_1) * sin(q_4) * cos(q_2)) * cos(q_5) + sin(q_1) * sin(q_2) * sin(q_3) * sin(q_5)) * sin(q_6) + (sin(q_1) * sin(q_2) * sin(q_4) * cos(q_3) + sin(q_1) * cos(q_2) * cos(q_4)) * cos(q_6)) + eePos_.x() * ((((-sin(q_1) * sin(q_2) * cos(q_3) * cos(q_4) + sin(q_1) * sin(q_4) * cos(q_2)) * cos(q_5) + sin(q_1) * sin(q_2) * sin(q_3) * sin(q_5)) * cos(q_6) + (-sin(q_1) * sin(q_2) * sin(q_4) * cos(q_3) - sin(q_1) * cos(q_2) * cos(q_4)) * sin(q_6)) * cos(q_7) + ((sin(q_1) * sin(q_2) * cos(q_3) * cos(q_4) - sin(q_1) * sin(q_4) * cos(q_2)) * sin(q_5) + sin(q_1) * sin(q_2) * sin(q_3) * cos(q_5)) * sin(q_7)) + eePos_.y() * ((-((-sin(q_1) * sin(q_2) * cos(q_3) * cos(q_4) + sin(q_1) * sin(q_4) * cos(q_2)) * cos(q_5) + sin(q_1) * sin(q_2) * sin(q_3) * sin(q_5)) * cos(q_6) - (-sin(q_1) * sin(q_2) * sin(q_4) * cos(q_3) - sin(q_1) * cos(q_2) * cos(q_4)) * sin(q_6)) * sin(q_7) + ((sin(q_1) * sin(q_2) * cos(q_3) * cos(q_4) - sin(q_1) * sin(q_4) * cos(q_2)) * sin(q_5) + sin(q_1) * sin(q_2) * sin(q_3) * cos(q_5)) * cos(q_7)) + eePos_.z() * (((-sin(q_1) * sin(q_2) * cos(q_3) * cos(q_4) + sin(q_1) * sin(q_4) * cos(q_2)) * cos(q_5) + sin(q_1) * sin(q_2) * sin(q_3) * sin(q_5)) * sin(q_6) + (sin(q_1) * sin(q_2) * sin(q_4) * cos(q_3) + sin(q_1) * cos(q_2) * cos(q_4)) * cos(q_6));
        out_jacobian(1, 2) = dEw_ * (sin(q_1) * sin(q_3) * cos(q_2) - cos(q_1) * cos(q_3)) * sin(q_4) + dWf_ * (((-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * cos(q_4) * cos(q_5) + (-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * sin(q_5)) * sin(q_6) - (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * sin(q_4) * cos(q_6)) + eePos_.x() * ((((-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * cos(q_4) * cos(q_5) + (-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * sin(q_5)) * cos(q_6) + (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * sin(q_4) * sin(q_6)) * cos(q_7) + (-(-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * sin(q_5) * cos(q_4) + (-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * cos(q_5)) * sin(q_7)) + eePos_.y() * ((-((-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * cos(q_4) * cos(q_5) + (-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * sin(q_5)) * cos(q_6) - (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * sin(q_4) * sin(q_6)) * sin(q_7) + (-(-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * sin(q_5) * cos(q_4) + (-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * cos(q_5)) * cos(q_7)) + eePos_.z() * (((-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * cos(q_4) * cos(q_5) + (-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * sin(q_5)) * sin(q_6) - (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * sin(q_4) * cos(q_6));
        out_jacobian(1, 3) = dEw_ * ((-sin(q_1) * cos(q_2) * cos(q_3) - sin(q_3) * cos(q_1)) * cos(q_4) - sin(q_1) * sin(q_2) * sin(q_4)) + dWf_ * ((-(sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * sin(q_4) + sin(q_1) * sin(q_2) * cos(q_4)) * sin(q_6) * cos(q_5) + (-(sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) - sin(q_1) * sin(q_2) * sin(q_4)) * cos(q_6)) + eePos_.x() * (((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * sin(q_4) - sin(q_1) * sin(q_2) * cos(q_4)) * sin(q_5) * sin(q_7) + ((-(sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * sin(q_4) + sin(q_1) * sin(q_2) * cos(q_4)) * cos(q_5) * cos(q_6) + ((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * sin(q_6)) * cos(q_7)) + eePos_.y() * (((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * sin(q_4) - sin(q_1) * sin(q_2) * cos(q_4)) * sin(q_5) * cos(q_7) + (-(-(sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * sin(q_4) + sin(q_1) * sin(q_2) * cos(q_4)) * cos(q_5) * cos(q_6) - ((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * sin(q_6)) * sin(q_7)) + eePos_.z() * ((-(sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * sin(q_4) + sin(q_1) * sin(q_2) * cos(q_4)) * sin(q_6) * cos(q_5) + (-(sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) - sin(q_1) * sin(q_2) * sin(q_4)) * cos(q_6));
        out_jacobian(1, 4) = dWf_ * (-((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * sin(q_5) + (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * cos(q_5)) * sin(q_6) + eePos_.x() * (((-(sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) - sin(q_1) * sin(q_2) * sin(q_4)) * cos(q_5) - (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * sin(q_5)) * sin(q_7) + (-((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * sin(q_5) + (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * cos(q_5)) * cos(q_6) * cos(q_7)) + eePos_.y() * (((-(sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) - sin(q_1) * sin(q_2) * sin(q_4)) * cos(q_5) - (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * sin(q_5)) * cos(q_7) - (-((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * sin(q_5) + (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * cos(q_5)) * sin(q_7) * cos(q_6)) + eePos_.z() * (-((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * sin(q_5) + (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * cos(q_5)) * sin(q_6);
        out_jacobian(1, 5) = dWf_ * ((((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * cos(q_5) + (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * sin(q_5)) * cos(q_6) - (-(sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * sin(q_4) + sin(q_1) * sin(q_2) * cos(q_4)) * sin(q_6)) + eePos_.x() * (-(((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * cos(q_5) + (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * sin(q_5)) * sin(q_6) + ((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * sin(q_4) - sin(q_1) * sin(q_2) * cos(q_4)) * cos(q_6)) * cos(q_7) + eePos_.y() * ((((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * cos(q_5) + (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * sin(q_5)) * sin(q_6) - ((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * sin(q_4) - sin(q_1) * sin(q_2) * cos(q_4)) * cos(q_6)) * sin(q_7) + eePos_.z() * ((((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * cos(q_5) + (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * sin(q_5)) * cos(q_6) - (-(sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * sin(q_4) + sin(q_1) * sin(q_2) * cos(q_4)) * sin(q_6));
        out_jacobian(1, 6) = eePos_.x() * (-((((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * cos(q_5) + (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * sin(q_5)) * cos(q_6) + ((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * sin(q_4) - sin(q_1) * sin(q_2) * cos(q_4)) * sin(q_6)) * sin(q_7) + (-((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * sin(q_5) + (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * cos(q_5)) * cos(q_7)) + eePos_.y() * ((-(((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * cos(q_5) + (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * sin(q_5)) * cos(q_6) - ((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * sin(q_4) - sin(q_1) * sin(q_2) * cos(q_4)) * sin(q_6)) * cos(q_7) - (-((sin(q_1) * cos(q_2) * cos(q_3) + sin(q_3) * cos(q_1)) * cos(q_4) + sin(q_1) * sin(q_2) * sin(q_4)) * sin(q_5) + (-sin(q_1) * sin(q_3) * cos(q_2) + cos(q_1) * cos(q_3)) * cos(q_5)) * sin(q_7));

        out_jacobian(2, 0) = 0;
        out_jacobian(2, 1) = dEw_ * (-sin(q_2) * cos(q_4) + sin(q_4) * cos(q_2) * cos(q_3)) - dSe_ * sin(q_2) + dWf_ * (((-sin(q_2) * sin(q_4) - cos(q_2) * cos(q_3) * cos(q_4)) * cos(q_5) + sin(q_3) * sin(q_5) * cos(q_2)) * sin(q_6) + (-sin(q_2) * cos(q_4) + sin(q_4) * cos(q_2) * cos(q_3)) * cos(q_6)) + eePos_.x() * ((((-sin(q_2) * sin(q_4) - cos(q_2) * cos(q_3) * cos(q_4)) * cos(q_5) + sin(q_3) * sin(q_5) * cos(q_2)) * cos(q_6) + (sin(q_2) * cos(q_4) - sin(q_4) * cos(q_2) * cos(q_3)) * sin(q_6)) * cos(q_7) + ((sin(q_2) * sin(q_4) + cos(q_2) * cos(q_3) * cos(q_4)) * sin(q_5) + sin(q_3) * cos(q_2) * cos(q_5)) * sin(q_7)) + eePos_.y() * ((-((-sin(q_2) * sin(q_4) - cos(q_2) * cos(q_3) * cos(q_4)) * cos(q_5) + sin(q_3) * sin(q_5) * cos(q_2)) * cos(q_6) - (sin(q_2) * cos(q_4) - sin(q_4) * cos(q_2) * cos(q_3)) * sin(q_6)) * sin(q_7) + ((sin(q_2) * sin(q_4) + cos(q_2) * cos(q_3) * cos(q_4)) * sin(q_5) + sin(q_3) * cos(q_2) * cos(q_5)) * cos(q_7)) + eePos_.z() * (((-sin(q_2) * sin(q_4) - cos(q_2) * cos(q_3) * cos(q_4)) * cos(q_5) + sin(q_3) * sin(q_5) * cos(q_2)) * sin(q_6) + (-sin(q_2) * cos(q_4) + sin(q_4) * cos(q_2) * cos(q_3)) * cos(q_6));
        out_jacobian(2, 2) = -dEw_ * sin(q_2) * sin(q_3) * sin(q_4) + dWf_ * ((sin(q_2) * sin(q_3) * cos(q_4) * cos(q_5) + sin(q_2) * sin(q_5) * cos(q_3)) * sin(q_6) - sin(q_2) * sin(q_3) * sin(q_4) * cos(q_6)) + eePos_.x() * (((sin(q_2) * sin(q_3) * cos(q_4) * cos(q_5) + sin(q_2) * sin(q_5) * cos(q_3)) * cos(q_6) + sin(q_2) * sin(q_3) * sin(q_4) * sin(q_6)) * cos(q_7) + (-sin(q_2) * sin(q_3) * sin(q_5) * cos(q_4) + sin(q_2) * cos(q_3) * cos(q_5)) * sin(q_7)) + eePos_.y() * ((-(sin(q_2) * sin(q_3) * cos(q_4) * cos(q_5) + sin(q_2) * sin(q_5) * cos(q_3)) * cos(q_6) - sin(q_2) * sin(q_3) * sin(q_4) * sin(q_6)) * sin(q_7) + (-sin(q_2) * sin(q_3) * sin(q_5) * cos(q_4) + sin(q_2) * cos(q_3) * cos(q_5)) * cos(q_7)) + eePos_.z() * ((sin(q_2) * sin(q_3) * cos(q_4) * cos(q_5) + sin(q_2) * sin(q_5) * cos(q_3)) * sin(q_6) - sin(q_2) * sin(q_3) * sin(q_4) * cos(q_6));
        out_jacobian(2, 3) = dEw_ * (sin(q_2) * cos(q_3) * cos(q_4) - sin(q_4) * cos(q_2)) + dWf_ * ((sin(q_2) * sin(q_4) * cos(q_3) + cos(q_2) * cos(q_4)) * sin(q_6) * cos(q_5) + (sin(q_2) * cos(q_3) * cos(q_4) - sin(q_4) * cos(q_2)) * cos(q_6)) + eePos_.x() * (((sin(q_2) * sin(q_4) * cos(q_3) + cos(q_2) * cos(q_4)) * cos(q_5) * cos(q_6) + (-sin(q_2) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_2)) * sin(q_6)) * cos(q_7) + (-sin(q_2) * sin(q_4) * cos(q_3) - cos(q_2) * cos(q_4)) * sin(q_5) * sin(q_7)) + eePos_.y() * ((-(sin(q_2) * sin(q_4) * cos(q_3) + cos(q_2) * cos(q_4)) * cos(q_5) * cos(q_6) - (-sin(q_2) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_2)) * sin(q_6)) * sin(q_7) + (-sin(q_2) * sin(q_4) * cos(q_3) - cos(q_2) * cos(q_4)) * sin(q_5) * cos(q_7)) + eePos_.z() * ((sin(q_2) * sin(q_4) * cos(q_3) + cos(q_2) * cos(q_4)) * sin(q_6) * cos(q_5) + (sin(q_2) * cos(q_3) * cos(q_4) - sin(q_4) * cos(q_2)) * cos(q_6));
        out_jacobian(2, 4) = dWf_ * (-(-sin(q_2) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_2)) * sin(q_5) + sin(q_2) * sin(q_3) * cos(q_5)) * sin(q_6) + eePos_.x() * ((-(-sin(q_2) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_2)) * sin(q_5) + sin(q_2) * sin(q_3) * cos(q_5)) * cos(q_6) * cos(q_7) + ((sin(q_2) * cos(q_3) * cos(q_4) - sin(q_4) * cos(q_2)) * cos(q_5) - sin(q_2) * sin(q_3) * sin(q_5)) * sin(q_7)) + eePos_.y() * (-(-(-sin(q_2) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_2)) * sin(q_5) + sin(q_2) * sin(q_3) * cos(q_5)) * sin(q_7) * cos(q_6) + ((sin(q_2) * cos(q_3) * cos(q_4) - sin(q_4) * cos(q_2)) * cos(q_5) - sin(q_2) * sin(q_3) * sin(q_5)) * cos(q_7)) + eePos_.z() * (-(-sin(q_2) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_2)) * sin(q_5) + sin(q_2) * sin(q_3) * cos(q_5)) * sin(q_6);
        out_jacobian(2, 5) = dWf_ * (((-sin(q_2) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_2)) * cos(q_5) + sin(q_2) * sin(q_3) * sin(q_5)) * cos(q_6) - (sin(q_2) * sin(q_4) * cos(q_3) + cos(q_2) * cos(q_4)) * sin(q_6)) + eePos_.x() * (-((-sin(q_2) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_2)) * cos(q_5) + sin(q_2) * sin(q_3) * sin(q_5)) * sin(q_6) + (-sin(q_2) * sin(q_4) * cos(q_3) - cos(q_2) * cos(q_4)) * cos(q_6)) * cos(q_7) + eePos_.y() * (((-sin(q_2) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_2)) * cos(q_5) + sin(q_2) * sin(q_3) * sin(q_5)) * sin(q_6) - (-sin(q_2) * sin(q_4) * cos(q_3) - cos(q_2) * cos(q_4)) * cos(q_6)) * sin(q_7) + eePos_.z() * (((-sin(q_2) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_2)) * cos(q_5) + sin(q_2) * sin(q_3) * sin(q_5)) * cos(q_6) - (sin(q_2) * sin(q_4) * cos(q_3) + cos(q_2) * cos(q_4)) * sin(q_6));
        out_jacobian(2, 6) = eePos_.x() * (-(((-sin(q_2) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_2)) * cos(q_5) + sin(q_2) * sin(q_3) * sin(q_5)) * cos(q_6) + (-sin(q_2) * sin(q_4) * cos(q_3) - cos(q_2) * cos(q_4)) * sin(q_6)) * sin(q_7) + (-(-sin(q_2) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_2)) * sin(q_5) + sin(q_2) * sin(q_3) * cos(q_5)) * cos(q_7)) + eePos_.y() * ((-((-sin(q_2) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_2)) * cos(q_5) + sin(q_2) * sin(q_3) * sin(q_5)) * cos(q_6) - (-sin(q_2) * sin(q_4) * cos(q_3) - cos(q_2) * cos(q_4)) * sin(q_6)) * cos(q_7) - (-(-sin(q_2) * cos(q_3) * cos(q_4) + sin(q_4) * cos(q_2)) * sin(q_5) + sin(q_2) * sin(q_3) * cos(q_5)) * sin(q_7));
    }

    void Kinematics::JacobianRot(const Kinematics::JointArrayType &q, Kinematics::JacobianRotType &out_jacobian) {
        transform_.setIdentity();
        for (int i = 0; i < NUM_OF_JOINTS; ++i) {
            out_jacobian.block<3, 1>(0, i) = transform_.block<3, 1>(0, 2);
            transform_i(q[i], i, transformTmp_);
            transform_ = transform_ * transformTmp_;
        }
    }

}